# Project: Godo - A Todo Application with Quick-Note Support

## Important Notes on GUI library
- fyne.io/fyne/v2 v2.5.3
  1. Key Events and Shortcuts:
     - Key.Modifier doesn't exist
     - Use desktop.CustomShortcut instead of fyne.ShortcutKey
     - Shortcuts must be registered via Canvas().AddShortcut()
     - KeyName is used instead of Key in CustomShortcut
  2. Focus and Window Management:
     - No RequestFocus() method
     - Use Canvas().Focus() instead
     - Window.Show() doesn't automatically focus
     - CenterOnScreen() should be called after Show()
     - Window visibility in tests uses Canvas().Size().IsZero()
     - Always defer window.Close() in tests
     - For popup windows, focus input fields in Show() method
     - For modal windows, set focus after content is set
  3. Widget Implementation:
     - Always call ExtendBaseWidget() in custom widget constructors
     - Override both KeyDown() and TypedKey() for complete key handling
     - TypedShortcut() needed for shortcut support
     - Base widget methods should be called after custom handling
     - For list widgets:
       - Always check bounds in update callbacks
       - Update data before refreshing UI
       - Store data in the widget struct for access in callbacks
       - Use container.NewHBox for complex list items
       - Keep references to child widgets for state updates
       - Refresh only after all data operations complete
     - For task list specifically:
       - Update task state before UI refresh
       - Handle task deletion by removing from store first
       - Update completion state in store before UI
       - Maintain task order during updates
       - Handle empty list state gracefully
     - Handle nil cases in all widget callbacks
     - Use container.NewBorder for complex layouts
     - Use container.NewVBox for vertical stacking
     - Prefer composition over inheritance for widgets
  4. Forms and Dialogs:
     - Dialog size must be set after creation
     - Forms don't automatically focus first field
     - Custom widgets must be properly extended for form usage
     - For error dialogs:
       - Use dialog.ShowError() for operation failures
       - Use dialog.ShowConfirm() for destructive actions
       - Error dialogs should be modal
       - Error dialogs should focus OK button
       - Show errors in the window where action occurred
       - Include error details but keep messages user-friendly
  5. Testing Best Practices:
     - Use test.NewApp() instead of custom mocks where possible
     - Use test.NewWindow() with defer Close() for window tests
     - Use test.NewTempApp(t) for temporary app instances
     - Use test.AssertRendersToImage() for visual tests
     - Use test.AssertObjectRendersToMarkup() for widget tests
     - Use httptest.NewServer for HTTP-based tests
     - Use t.TempDir() for temporary files
     - Use assert.JSONEq() for JSON comparisons
     - Use time.After() instead of time.Sleep() for timeouts
     - Mock interfaces should be small and focused
     - Always clean up resources with defer
     - Use build tags for platform-specific tests
     - Import test package with blank identifier
     - Test both success and error paths
     - Test edge cases explicitly
  6. Resource Management:
     - Use //go:embed for test resources
     - Clean up files with defer os.Remove()
     - Use filepath.Join() for paths
     - Handle Windows path separators
     - Use storage.ParseURI() for URIs
  7. State Management:
     - Use channels for async notifications
     - Use AddChangeListener for state changes
     - Verify state transitions explicitly
     - Test preference persistence
     - Test settings overrides
     - For task state:
       - Update store before UI
       - Handle store errors gracefully
       - Maintain consistency between store and UI
       - Use proper locking if needed
       - Consider using events for updates
  8. Canvas and Rendering:
     - Use software.NewCanvas() for driver tests
     - Test with different scale factors
     - Test with different theme variants
     - Test with different window sizes
     - Compare RGBA values exactly
     - Test transparent backgrounds
     - Test minimum sizes
     - Test layout positions
  9. Error Handling:
     - Test "not implemented" errors
     - Test file operation errors
     - Test corrupt resources
     - Test invalid states
     - Test cleanup failures
     - For task operations:
       - Show user-friendly error messages
       - Log detailed error information
       - Maintain UI state on error
       - Provide recovery options
       - Handle network timeouts

## Project Overview
- Todo application with two main features:
  1. Quick-note capture via global hotkey
  2. Full-featured todo management interface
- Built with Go and SQLite
- Uses Fyne for all UI components
- Cross-platform compatibility (Windows, Linux)

## Core Features
- Quick-Note System
  - Global hotkey registration
  - Minimal graphical popup window
    - Platform-specific implementations
    - Windows: golang.design/x/hotkey
    - Linux: golang.design/x/hotkey
  - Instant task capture
- Main Application Window
  - Task organization
  - Task completion tracking
  - Task deletion
  - Modern graphical interface using Fyne widgets
- Database
  - SQLite3 storage
  - Repository pattern
  - Service layer abstraction

## Technical Requirements
- Go 1.23 or higher
- SQLite3
- MinGW-w64 GCC (for Windows)
- Task runner for build automation

## Code Style & Standards
- Follow standard Go formatting guidelines
- Implement dependency injection using Wire
- Use structured logging with Zap
- Keep functions small and focused
- Use meaningful variable and function names
- Use modern octal literal style (0o600 instead of 0600)
- Never use time.Sleep for synchronization
  - Use proper synchronization primitives (channels, WaitGroups, etc.)
  - Use event-driven approaches for UI state management
  - Implement proper ready/state callbacks where available
- Use build tags for platform-specific code
  - docker - for Docker-specific implementations
  - windows/linux - for OS-specific features

## Project Structure
- cmd/
  - godo/ - Main application entry point
    - main.go - Application initialization
- internal/
  - app/ - Core application logic
    - app.go - Main application setup
    - hotkey_common.go - Common hotkey interface
    - hotkey_default.go - Default hotkey implementation
    - hotkey_docker.go - Docker-specific implementation
  - common/ - Shared utilities and types
    - errors/ - Custom error types
    - testutils/ - Testing utilities
  - config/ - Configuration management
    - config.go - Configuration types
    - loader.go - Config file loading
  - gui/ - User interface components
    - mainwindow/ - Main application window
      - window.go - Window setup
      - menu.go - Menu definitions
      - toolbar.go - Toolbar setup
    - quicknote/ - Quick note popup
      - window.go - Quick note window
    - widgets/ - Custom Fyne widgets
      - task_list.go - Todo list widget
      - task_item.go - Individual task widget
    - theme/ - Custom theming
      - colors.go - Color definitions
      - icons.go - Custom icons
  - model/ - Data models
    - task.go - Task data structures
  - storage/ - Data persistence
    - sqlite/ - SQLite implementation
      - db.go - Database setup
      - migrations/ - Schema migrations
    - repository/ - Data access layer
      - task.go - Task repository
- assets/ - Application resources
  - icons/ - Application icons
  - themes/ - Theme resources
- build/ - Build configurations
  - Dockerfile.linux - Linux Docker build
- configs/ - Configuration files
  - default.yaml - Default settings

## Testing Requirements
- Unit tests for all packages
  - Service tests
  - Repository tests
  - Database tests
  - Hotkey system tests
- Integration tests
- CI pipeline integration

## System Integration
- Graceful shutdown handling
- System service support
  - Windows service
  - Linux systemd
- Auto-start capability
- Update mechanism

## Documentation
- Comprehensive README
- API documentation
- Usage examples
- Installation guides
- Hotkey documentation

## Future Considerations
- Task categories/tags
- Due dates and reminders
- Data export/import
- Task priorities
- Recurring tasks
- Multiple lists
- Cloud sync

Remember: Focus on reliability, user experience, and cross-platform compatibility while maintaining clean, maintainable code.
