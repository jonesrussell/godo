version: '3'

includes:
  build:
    taskfile: ./Taskfile.build.yml
    optional: true

vars:
  BINARY_NAME: godo
  BUILD_DIR: dist
  COVERAGE_DIR: coverage
  GO_VERSION: 1.23
  GOOS:
    sh: go env GOOS
  VERSION:
    sh: git describe --tags --always 2>/dev/null || echo dev
  COMMIT:
    sh: git rev-parse --short HEAD 2>/dev/null || echo unknown
  # Cross-platform build time
  BUILD_TIME:
    # Use PowerShell on Windows, date on Linux/macOS
    sh: |
      if [ "$(go env GOOS)" = "windows" ]; then
        powershell -Command "(Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')"
      else
        date -u +"%Y-%m-%dT%H:%M:%SZ"
      fi

tasks:
  default:
    cmds:
    - task --list-all
    silent: true

  install-tools:
    desc: Install development tools
    cmds:
    - go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
    - go install golang.org/x/tools/cmd/goimports@latest
    - go install github.com/google/wire/cmd/wire@latest

  deps:
    desc: Download and tidy dependencies
    cmds:
    - go mod download
    - go mod tidy

  fmt:
    desc: Format code
    cmds:
    - go vet ./...
    - gofmt -s -w .
    - goimports -w .

  lint:
    desc: Run all linters
    deps: [ fmt ]
    sources: [ internal/**/*.go, cmd/**/*.go ]
    cmds:
    - golangci-lint run ./...

  lint:fix:
    desc: Run golangci-lint with auto-fix
    deps: [ fmt ]
    sources: [ internal/**/*.go, cmd/**/*.go ]
    cmds:
    - golangci-lint run ./... --fix

  test:
    desc: Run basic tests
    cmds:
    - go test ./... -tags=wireinject

  test:race:
    desc: Run tests with race detection
    cmds:
    - go test -race ./...

  test:cover:
    desc: Run tests with coverage
    cmds:
    - mkdir -p {{.COVERAGE_DIR}}
    - go test -coverprofile={{.COVERAGE_DIR}}/coverage.out -covermode=atomic ./...
    - go tool cover -html={{.COVERAGE_DIR}}/coverage.out -o {{.COVERAGE_DIR}}/coverage.html

  test:linux:
    desc: Run tests on Linux with virtual display
    platforms: [ linux ]
    cmds:
    - mkdir -p {{.COVERAGE_DIR}}
    # Start Xvfb
    - Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
    # Wait for Xvfb to start
    - sleep 1
    # Run tests with virtual display and coverage
    - DISPLAY=:99.0 FYNE_RENDERER=software go test -race -coverprofile={{.COVERAGE_DIR}}/coverage.out -covermode=atomic ./...
    - go tool cover -html={{.COVERAGE_DIR}}/coverage.out -o {{.COVERAGE_DIR}}/coverage.html
    # Cleanup Xvfb
    - pkill Xvfb || true

  test:wsl2:
    desc: Run tests in WSL2 environment with X11 forwarding
    platforms: [ linux ]
    cmds:
    - mkdir -p {{.COVERAGE_DIR}}
    # Check if we're in WSL2
    - echo "Testing in WSL2 environment with DISPLAY={{.DISPLAY}}"
    # Run tests with current display (should work with X11 forwarding)
    - DISPLAY={{.DISPLAY}} FYNE_RENDERER=software go test -race -coverprofile={{.COVERAGE_DIR}}/coverage.out -covermode=atomic ./...
    - go tool cover -html={{.COVERAGE_DIR}}/coverage.out -o {{.COVERAGE_DIR}}/coverage.html

  run:
    desc: Run the application
    env:
      CGO_ENABLED: 1
      LANG: en_US.UTF-8
      LC_ALL: en_US.UTF-8
    cmds:
    - go run -ldflags "-X main.version={{.VERSION}} -X main.commit={{.COMMIT}} -X main.buildTime={{.BUILD_TIME}}" cmd/godo/main.go

  run-debug:
    desc: Run the application with debug output
    env:
      CGO_ENABLED: 1
      LOG_LEVEL: debug
      LANG: en_US.UTF-8
      LC_ALL: en_US.UTF-8
    cmds:
    - go run -ldflags "-X main.version={{.VERSION}} -X main.commit={{.COMMIT}} -X main.buildTime={{.BUILD_TIME}}" cmd/godo/main.go

  watch:
    desc: Watch for changes and rebuild
    cmds:
    - watchexec -r -e go "task --taskfile Taskfile.build.yml build && {{if eq .GOOS \"windows\"}}{{.BUILD_DIR}}/{{.BINARY_NAME}}.exe{{else}}{{.BUILD_DIR}}/{{.BINARY_NAME}}{{end}}"

  # CI/CD tasks
  ci:
    desc: Run CI checks
    cmds:
    - task: lint
    - task: test

  ci:full:
    desc: Run full CI pipeline including builds
    deps: [ ci ]
    cmds:
    - task --taskfile Taskfile.build.yml docker:build-all

  # New tasks for release management
  release:prepare:
    desc: Prepare a new release
    cmds:
    - task --taskfile Taskfile.build.yml clean
    - task: fmt
    - task: lint
    - task: test
    - task --taskfile Taskfile.build.yml docker:build-all

  release:tag:
    desc: Create and push a new release tag
    vars:
      TAG: '{{.CLI_ARGS}}'
    cmds:
    - git tag -a {{.TAG}} -m "Release {{.TAG}}"
    - git push origin {{.TAG}}

  release:docker:
    desc: Build and push Docker images
    vars:
      TAG: '{{.CLI_ARGS}}'
    cmds:
    - docker build --target linux-runtime -t jonesrussell/godo:{{.TAG}} -f build/docker/Dockerfile .
    - docker push jonesrussell/godo:{{.TAG}}
    - docker tag jonesrussell/godo:{{.TAG}} jonesrussell/godo:latest
    - docker push jonesrussell/godo:latest

  all:
    desc: Run all main tasks
    cmds:
    - task: deps
    - task: fmt
    - task: lint
    - task: test
    - task --taskfile Taskfile.build.yml all

  dev:
    desc: Development workflow - format, lint, test
    cmds:
    - task: lint
    - task: test

  dev:wsl2:
    desc: WSL2 development workflow - format, lint, test with X11
    cmds:
    - task: lint
    - task: test:wsl2

  wire:
    desc: Generate wire code for current platform
    cmds:

  mocks:
    desc: Generate all mocks using mockgen
    cmds:
    - task: mocks:storage
    - task: mocks:logger
    - task: mocks:service
    - task: mocks:gui
    - task: mocks:app

  mocks:storage:
    desc: Generate storage interface mocks
    cmds:
    - go generate ./internal/storage/...

  mocks:logger:
    desc: Generate logger interface mocks
    cmds:
    - go generate ./internal/logger/...

  mocks:service:
    desc: Generate service interface mocks
    cmds:
    - go generate ./internal/service/...

  mocks:gui:
    desc: Generate GUI interface mocks
    cmds:
    - go generate ./internal/gui/...

  mocks:app:
    desc: Generate app interface mocks
    cmds:
    - go generate ./internal/app/...

  mocks:clean:
    desc: Clean generated mocks
    cmds:
    - rm -rf test/mocks/*.go
    - task: build:wire

  build:
    desc: Build for current platform (native)
    cmds:
    - task: build:native

  check:
    desc: Quick check - format and lint only
    deps: [ fmt ]
    cmds:
    - golangci-lint run ./... --fast

  setup:linux:
    desc: Install Linux dependencies
    platforms: [ linux ]
    cmds:
    - sudo apt-get update
    - sudo apt-get install -y xvfb libx11-dev

  setup:windows:
    desc: Install Windows dependencies
    platforms: [ windows ]
    cmds:
    - choco install mingw
    - choco install make

  wsl2:test-gui:
    desc: Test GUI components in WSL2 with X11
    platforms: [ linux ]
    cmds:
    - echo "Testing GUI in WSL2 environment"
    - go test -v ./internal/gui/...
