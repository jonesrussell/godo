version: '3'

tasks:
  default:
    cmds:
      - task: run

  wire:
    cmds:
      - cd internal/app && wire

  run:
    deps: [wire]
    cmds:
      - go run cmd/godo/main.go

  debug:
    deps: [wire]
    env:
      DEBUG: "1"
    cmds:
      - go run cmd/godo/main.go

  test:
    desc: Run tests
    deps: [wire]
    cmds:
      - go test -v ./...

  lint:
    desc: Run linters for current platform
    cmds:
      - golangci-lint run

  lint-all:
    desc: Run linters for all platforms
    cmds:
      - task: lint-windows
      - task: lint-darwin
      - task: lint-linux
      - |
        echo "Cross-platform build check..."
        GOOS=windows go build ./...
        GOOS=darwin go build ./...
        GOOS=linux go build ./...

  lint-windows:
    desc: Run linters for Windows
    env:
      GOOS: windows
    cmds:
      - golangci-lint run

  lint-darwin:
    desc: Run linters for macOS
    env:
      GOOS: darwin
    cmds:
      - golangci-lint run

  lint-linux:
    desc: Run linters for Linux
    env:
      GOOS: linux
    cmds:
      - golangci-lint run

  fmt:
    desc: Format all Go code
    cmds:
      - goimports -w .
      - gofmt -s -w .
      - go mod tidy

  fmt-check:
    desc: Check if files need formatting
    cmds:
      - goimports -l .
      - test -z "$(gofmt -l .)"

  clean:
    desc: Clean build artifacts
    cmds:
      - cmd: rd /s /q bin 2>nul || exit 0
        platforms: [windows]
      - cmd: rm -rf bin/
        platforms: [linux, darwin]

  dev:
    desc: Run development tasks (fmt, lint, test, build)
    cmds:
      - task: fmt
      - task: wire
      - task: lint
      - task: test
      - task: build

  install:
    desc: Install project dependencies
    cmds:
      - go install github.com/google/wire/cmd/wire@latest
      - go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
      - go mod tidy
      - go mod download

  logs:
    desc: Watch application logs
    platforms: [windows]
    cmds:
      - cmd /C "type logs\godo.log"

  test-coverage:
    desc: Run tests with coverage report
    deps: [wire]
    cmds:
      - go test -race -coverprofile=coverage.out -coverpkg=./... ./...
      - go tool cover -html=coverage.out -o coverage.html
      - go tool cover -func=coverage.out

  test-coverage-threshold:
    desc: Run tests and check coverage threshold
    deps: [wire]
    cmds:
      - cmd: bash scripts/test-coverage.sh
        platforms: [windows]
      - cmd: ./scripts/test-coverage.sh
        platforms: [linux, darwin]

  build:
    desc: Build for current platform
    deps: [wire]
    cmds:
      - go build -o bin/godo cmd/godo/main.go

  build-all:
    desc: Build for all platforms
    deps: [wire]
    cmds:
      - task: build-windows
      - task: build-darwin
      - task: build-linux

  build-windows:
    desc: Build for Windows
    deps: [wire]
    env:
      GOOS: windows
      GOARCH: amd64
    cmds:
      - go build -o bin/godo.exe cmd/godo/main.go

  build-darwin:
    desc: Build for macOS
    deps: [wire]
    env:
      GOOS: darwin
      GOARCH: amd64
    cmds:
      - go build -o bin/godo-darwin cmd/godo/main.go

  build-linux:
    desc: Build for Linux
    deps: [wire]
    env:
      GOOS: linux
      GOARCH: amd64
    cmds:
      - go build -o bin/godo-linux cmd/godo/main.go