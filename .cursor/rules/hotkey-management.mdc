# Hotkey Management

This project uses a unified hotkey management system with cross-platform support and proper thread safety for Fyne UI operations.

## Hotkey Architecture

### Unified Manager
- Single implementation: [internal/application/hotkey/manager_unified.go](mdc:internal/application/hotkey/manager_unified.go)
- Platform-specific logic only where necessary
- Uses actively maintained library: `github.com/csturiale/hotkey`

### Thread Safety for UI Operations
- Hotkey handlers run on background threads
- **ALWAYS** use `fyne.DoAndWait()` for UI operations from hotkey handlers
- Never call Fyne UI methods directly from hotkey callbacks
- Use factory pattern for on-demand window creation

### Configuration
- Hotkey configuration in [internal/config/config.go](mdc:internal/config/config.go)
- Simple string-based modifiers: `["Ctrl", "Shift", "Alt"]`
- Cross-platform key support: `"G"`, `"N"`, etc.

## Implementation Guidelines

### Thread-Safe Window Creation
```go
// Hotkey factory pattern - always use DoAndWait
quickNoteFactory := func() hotkey.QuickNoteService {
    return app.getOrCreateQuickNoteWindow(false) // false = background thread
}

// In getOrCreateQuickNoteWindow(isUIThread bool)
if isUIThread {
    // Safe to create directly
    create()
} else {
    // Use DoAndWait for background threads
    done := make(chan struct{})
    go func() {
        fyne.DoAndWait(create)
        close(done)
    }()
    <-done
}
```

### Modifier Handling
- Use raw modifier values for cross-platform compatibility
- Windows: `hotkey.Modifier(0x1)` for Alt
- Linux/Darwin: `hotkey.Modifier(8)` for Alt (Mod1)
- Avoid platform-specific constants that don't exist on other platforms

### Platform-Specific Logic
- Only add platform-specific code when absolutely necessary
- Use `runtime.GOOS` checks for platform detection
- Keep platform logic minimal and well-documented

### Error Handling
- Graceful fallback when hotkeys aren't supported (e.g., WSL2)
- Clear error messages for unsupported platforms
- Continue application operation even if hotkeys fail
- Handle thread safety errors gracefully

## Best Practices

### Library Selection
- Use actively maintained libraries (avoid unmaintained ones)
- Prefer forks with recent updates over original unmaintained libraries
- Document library choices and reasoning

### Code Organization
- Single manager implementation for all platforms
- Clear interface definitions
- Proper dependency injection
- No circular dependencies
- Thread-safe UI operation patterns

### Testing
- Test cross-platform compilation
- Verify hotkey registration works on target platforms
- Test graceful degradation when hotkeys aren't available
- Test thread safety with concurrent hotkey triggers

## Migration Notes
- Migrated from `golang.design/x/hotkey` to `github.com/csturiale/hotkey`
- Removed platform-specific wrapper files
- Consolidated into unified manager
- Eliminated unnecessary abstractions
- Added thread safety patterns for Fyne UI operations
description:
globs: ["**/hotkey/**/*.go"]
alwaysApply: false
---
