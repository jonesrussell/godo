# Base stage with common dependencies
FROM golang:1.23-bullseye AS base
RUN apt-get update && apt-get install -y \
    libx11-dev \
    libxcursor-dev \
    libxrandr-dev \
    libxinerama-dev \
    libxi-dev \
    libgl1-mesa-dev \
    libxxf86vm-dev \
    xvfb \
    dbus \
    dbus-x11 \
    && rm -rf /var/lib/apt/lists/*

# Tools stage for installing development tools
FROM base AS tools
WORKDIR /app
COPY go.mod go.sum ./
RUN go mod download
RUN go install github.com/google/wire/cmd/wire@latest && \
    go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest

# Wire generation stage
FROM tools AS wire
COPY . .
COPY build/run-with-xvfb.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/run-with-xvfb.sh
RUN /usr/local/bin/run-with-xvfb.sh bash -c 'cd internal/container && wire gen -tags linux'

# Lint stage
FROM wire AS lint
RUN /usr/local/bin/run-with-xvfb.sh golangci-lint run ./...

# Test stage
FROM wire AS test

# Set up dbus and X11
RUN mkdir -p /var/run/dbus && \
    dbus-uuidgen > /var/lib/dbus/machine-id && \
    dbus-daemon --config-file=/usr/share/dbus-1/system.conf --print-address

# Set up environment variables
ENV DISPLAY=:99.0
ENV DBUS_SESSION_BUS_ADDRESS="unix:path=/var/run/dbus/system_bus_socket"
ENV CGO_ENABLED=1

# Run tests with Xvfb and docker tag
RUN /usr/local/bin/run-with-xvfb.sh go test -v -count=1 -tags=docker ./...

# Build stage
FROM wire AS builder
RUN CGO_ENABLED=1 GOOS=linux GOARCH=amd64 go build -tags "linux nomobile" -o bin/godo-linux cmd/godo/main.go

# Runtime stage
FROM debian:bullseye-slim
RUN apt-get update && apt-get install -y \
    libx11-6 \
    libxcursor1 \
    libxrandr2 \
    libxinerama1 \
    libxi6 \
    libgl1 \
    libxxf86vm1 \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app
COPY --from=builder /app/bin/godo-linux /app/godo
ENTRYPOINT ["/app/godo"] 