name: Build and Test

on:
  push:
    branches: [ main ]
    paths:
      - '**.go'
      - 'go.mod'
      - 'go.sum'
      - '.github/workflows/go.yml'
      - 'build/**'
  pull_request:
    paths:
      - '**.go'
      - 'go.mod'
      - 'go.sum'
      - '.github/workflows/go.yml'
      - 'build/**'

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      go-cache-key: ${{ steps.go-cache.outputs.cache-key }}
    steps:
      - uses: actions/checkout@v4
      - id: go-cache
        run: echo "cache-key=${{ hashFiles('**/go.sum') }}" >> $GITHUB_OUTPUT

#  lint:
#    needs: prepare
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v4
#      - uses: actions/setup-go@v5
#        with:
#          go-version: 1.23
#      - name: Install system dependencies
#        run: |
#          sudo apt-get update
#          sudo apt-get install -y gcc libx11-dev libxcursor-dev libxrandr-dev libxinerama-dev libxi-dev libxxf86vm-dev
#      - uses: actions/cache@v4
#        with:
#          path: |
#            ~/.cache/go-build
#            ~/go/pkg/mod
#          key: ${{ runner.os }}-go-lint-${{ needs.prepare.outputs.go-cache-key }}
#
#      - name: Install Task
#        uses: arduino/setup-task@v2
#        with:
#          version: 3.x
#          repo-token: ${{ secrets.GITHUB_TOKEN }}
#
#      - name: Run linting
#        run: task lint:linux

#  test:
#    needs: prepare
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v4
#      - uses: actions/setup-go@v5
#        with:
#          go-version: 1.23
#      - name: Install system dependencies
#        run: |
#          sudo apt-get update
#          sudo apt-get install -y gcc libx11-dev libxcursor-dev libxrandr-dev libxinerama-dev libxi-dev libxxf86vm-dev
#      - uses: actions/cache@v4
#        with:
#          path: |
#            ~/.cache/go-build
#            ~/go/pkg/mod
#          key: ${{ runner.os }}-go-test-${{ needs.prepare.outputs.go-cache-key }}
#
#      - name: Install Task
#        uses: arduino/setup-task@v2
#        with:
#          version: 3.x
#          repo-token: ${{ secrets.GITHUB_TOKEN }}
#
#      - name: Run tests
#        run: task test:linux

  build:
    needs: [prepare]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - os: windows
            arch: amd64
            artifact: godo.exe
          - os: linux
            arch: amd64
            artifact: godo-linux
          # Optionally add more combinations like:
          # - os: linux
          #   arch: arm64
          #   artifact: godo-linux-arm64

    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-go@v5
        with:
          go-version: 1.23
          cache: true  # Enable Go module caching
      
      # Only install system dependencies for Linux builds
      - name: Install system dependencies
        if: matrix.os == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            gcc \
            libgl1-mesa-dev \
            libx11-dev \
            libxcursor-dev \
            libxrandr-dev \
            libxinerama-dev \
            libxi-dev \
            libxxf86vm-dev \
            libglx-dev \
            pkg-config

      # Cache build tools
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
            ~/go/bin  # Cache binary tools like wire
          key: ${{ runner.os }}-${{ matrix.os }}-${{ matrix.arch }}-go-${{ needs.prepare.outputs.go-cache-key }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.os }}-${{ matrix.arch }}-go-

      - name: Install Wire
        run: go install github.com/google/wire/cmd/wire@latest

      - name: Install Task
        uses: arduino/setup-task@v2
        with:
          version: 3.x
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      # Build with matrix variables
      - name: Build binary
        env:
          GOOS: ${{ matrix.os }}
          GOARCH: ${{ matrix.arch }}
        run: task build:${{ matrix.os }}

      # Add versioning based on git tags
      - name: Get version
        id: get_version
        run: |
          VERSION=$(git describe --tags --always --dirty)
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      # Upload individual artifacts with version
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: godo-${{ steps.get_version.outputs.version }}-${{ matrix.os }}-${{ matrix.arch }}
          path: bin/${{ matrix.artifact }}
