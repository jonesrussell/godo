# Project: Godo - A Todo Application with Quick-Note Support

## Important Notes on GUI library
- fyne.io/fyne/v2 v2.5.3
  1. Key Events and Shortcuts:
     - Key.Modifier doesn't exist
     - Use desktop.CustomShortcut instead of fyne.ShortcutKey
     - Shortcuts must be registered via Canvas().AddShortcut()
     - KeyName is used instead of Key in CustomShortcut
  2. Focus and Window Management:
     - No RequestFocus() method
     - Use Canvas().Focus() instead
     - Window.Show() doesn't automatically focus
     - CenterOnScreen() should be called after Show()
  3. Widget Implementation:
     - Always call ExtendBaseWidget() in custom widget constructors
     - Override both KeyDown() and TypedKey() for complete key handling
     - TypedShortcut() needed for shortcut support
     - Base widget methods should be called after custom handling
  4. Forms and Dialogs:
     - Dialog size must be set after creation
     - Forms don't automatically focus first field
     - Custom widgets must be properly extended for form usage
  5. Testing Best Practices:
     - Use test.NewApp() to create a test application instance
     - Window visibility in tests is represented by Canvas().Size().IsZero()
     - Use test.NewWindow() for creating test windows
     - Always defer window.Close() to clean up test resources
     - Driver tests can use AbsolutePositionForObject() to check layout
     - Window padding affects object positioning (use SetPadded() to control)
     - Test window titles and content separately
     - Mock complex window behaviors using test package utilities instead of custom mocks
     - Test async behavior using channels and listeners
     - Use AddChangeListener to test preference and settings changes
     - Create small, focused mock implementations for interfaces
     - Test both synchronous and asynchronous state transitions
     - Verify preference updates trigger appropriate listeners
     - Use channels to test asynchronous events and updates

## Project Overview
- Todo application with two main features:
  1. Quick-note capture via global hotkey
  2. Full-featured todo management interface
- Built with Go and SQLite
- Uses Bubble Tea for TUI
- Cross-platform compatibility (Windows, Linux, macOS)

## Core Features
- Quick-Note System
  - Global hotkey registration
  - Minimal graphical popup window
    - Platform-specific implementations
    - Windows: Win32 API
    - macOS: Cocoa/NSWindow
    - Linux: GTK
  - Instant task capture
- Full UI Mode (Terminal-based)
  - Task organization
  - Task completion tracking
  - Task deletion
- Database
  - SQLite3 storage
  - Repository pattern
  - Service layer abstraction

## Technical Requirements
- Go 1.23.4 (as of March 2024 - Note: Earlier I incorrectly claimed Go 1.22 was latest)
- SQLite3
- MinGW-w64 GCC (for Windows)

## Code Style & Standards
- Follow standard Go formatting guidelines
- Implement dependency injection using Wire
- Use structured logging with Zap
- Keep functions small and focused
- Use meaningful variable and function names
- Use modern octal literal style (0o600 instead of 0600)
- Never use time.Sleep for synchronization
  - Use proper synchronization primitives (channels, WaitGroups, etc.)
  - Use event-driven approaches for UI state management
  - Implement proper ready/state callbacks where available

## Project Structure
- cmd/godo/ - Main application entry point
- internal/
  - app/ - Core application logic
  - common/ - Shared utilities and types
  - config/ - Configuration management
    - hotkey/ - Hotkey configuration and mapping
  - container/ - Dependency injection (Wire)
  - logger/ - Logging system
    - testing.go - Test logger implementation
  - model/ - Data models
  - storage/ - Data persistence
    - sqlite/ - SQLite implementation
  - ui/ - User interface components
    - fyne/ - Fyne.io GUI implementation
- pkg/ - Public libraries (if needed)
- configs/ - Configuration files
  - default.yaml - Default configuration

## Testing Requirements
- Unit tests for all packages
  - Service tests
  - Repository tests
  - Database tests
  - Hotkey system tests
- Integration tests
- CI pipeline integration

## System Integration
- Graceful shutdown handling
- System service support
  - Windows service
  - Linux systemd
  - macOS launchd
- Auto-start capability
- Update mechanism

## Documentation
- Comprehensive README
- API documentation
- Usage examples
- Installation guides
- Hotkey documentation

## Future Considerations
- Task categories/tags
- Due dates and reminders
- Data export/import
- Task priorities
- Recurring tasks
- Multiple lists
- Cloud sync

Remember: Focus on reliability, user experience, and cross-platform compatibility while maintaining clean, maintainable code.
