# Testing Guidelines

This project requires comprehensive testing with proper DI integration.

## Test Structure

### Unit Tests
- Test individual components in isolation
- Use mocks for dependencies
- Follow naming: `TestComponentName`
- Place tests in same package as code

### Integration Tests
- Test component interactions
- Use real implementations where appropriate
- Test full workflows
- Use separate test packages

### Mock Generation
- Use `go:generate` directives for mock generation
- Generate mocks for all interfaces
- Store mocks in `test/mocks/` directory
- Example: [internal/domain/service/task_service.go](mdc:internal/domain/service/task_service.go)

## DI Testing

### Test Provider Sets
- Create `TestSet` in wire configuration
- Use mock implementations for external dependencies
- Bind interfaces to mock implementations
- Follow pattern in [internal/application/container/wire.go](mdc:internal/application/container/wire.go)

### Test Logger
- Use test logger implementation: [internal/infrastructure/logger/testing.go](mdc:internal/infrastructure/logger/testing.go)
- Avoid file I/O in tests
- Capture log output for assertions

### Test Storage
- Use in-memory storage for tests: [internal/infrastructure/storage/memory/store.go](mdc:internal/infrastructure/storage/memory/store.go)
- Reset state between tests
- Test data isolation

## Test Requirements
- Every service must have unit tests
- Every repository must have integration tests
- Every API endpoint must have tests
- Maintain >80% code coverage
description:
globs:
alwaysApply: false
---
