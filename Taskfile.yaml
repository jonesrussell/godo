version: '3'

tasks:
  default:
    cmds:
      - task: run

  wire:
    desc: Generate wire dependency injection code
    cmds:
      - cd internal/container && wire

  run:
    deps: [wire]
    cmds:
      - go run cmd/godo/main.go

  debug:
    deps: [wire]
    env:
      DEBUG: "1"
    cmds:
      - go run cmd/godo/main.go

  test:
    desc: Run tests
    deps: [wire]
    cmds:
      - go test -v ./...

  lint:
    desc: Run linters for current platform only
    cmds:
      - |
        CURRENT_GOOS=$(go env GOOS)
        echo "Running linter for current platform ($CURRENT_GOOS)"
        golangci-lint run

  lint-all:
    desc: Run linters for all platforms
    cmds:
      - task: lint
      - |
        echo "Running cross-platform build checks..."
        GOOS=windows go build ./...
        GOOS=darwin go build ./...
        GOOS=linux go build ./...

  fmt:
    desc: Format all Go code
    cmds:
      - goimports -w .
      - gofmt -s -w .
      - go mod tidy

  fmt-check:
    desc: Check if files need formatting
    cmds:
      - goimports -l .
      - test -z "$(gofmt -l .)"

  clean:
    desc: Clean build artifacts and generated files
    cmds:
      - cmd: rd /s /q bin 2>nul || exit 0
        platforms: [windows]
      - cmd: rm -rf bin/
        platforms: [linux, darwin]
      - cmd: del /f /q internal\container\wire_gen.go 2>nul || exit 0
        platforms: [windows]
      - cmd: rm -f internal/container/wire_gen.go
        platforms: [linux, darwin]

  dev:
    desc: Run development tasks (fmt, lint, test, build)
    cmds:
      - task: fmt
      - task: wire
      - task: lint
      - task: test
      - task: build

  install:
    desc: Install project dependencies
    cmds:
      - go install github.com/google/wire/cmd/wire@latest
      - go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
      - go mod tidy
      - go mod download

  logs:
    desc: Watch application logs
    platforms: [windows]
    cmds:
      - cmd /C "type logs\godo.log"

  test:coverage:
    desc: Run tests with coverage report
    deps: [wire]
    cmds:
      - go test -race -coverprofile=coverage.out -coverpkg=./... ./...
      - go tool cover -html=coverage.out -o coverage.html
      - go tool cover -func=coverage.out

  test:coverage:threshold:
    desc: Run tests and check coverage threshold
    deps: [wire]
    cmds:
      - cmd: bash scripts/test-coverage.sh
        platforms: [windows]
      - cmd: ./scripts/test-coverage.sh
        platforms: [linux, darwin]

  build:
    desc: Build for current platform
    deps: [wire]
    vars:
      VERSION:
        sh: git describe --tags --always --dirty
    cmds:
      - go build -ldflags="-X main.Version={{.VERSION}}" -o bin/godo cmd/godo/main.go

  build:all:
    desc: Build for all platforms
    deps: [wire]
    cmds:
      - task: build:windows
      - task: build:darwin
      - task: build:linux

  build:windows:
    desc: Build for Windows
    deps: [wire]
    env:
      GOOS: windows
      GOARCH: amd64
    dir: cmd/godo
    cmds:
      - go build -o ../../bin/godo.exe

  build:darwin:
    desc: Build for macOS
    deps: [wire]
    env:
      GOOS: darwin
      GOARCH: amd64
    cmds:
      - go build -o bin/godo-darwin cmd/godo/main.go

  build:linux:
    desc: Build for Linux
    deps: [wire]
    env:
      GOOS: linux
      GOARCH: amd64
    cmds:
      - go build -o bin/godo-linux cmd/godo/main.go

  watch:
    desc: Watch for file changes and rebuild
    cmds:
      - task: build
      - watchexec -e go "task build"

  docker:
    desc: Build Docker image
    cmds:
      - docker build -t godo:latest .

  generate:
    desc: Run all code generation
    cmds:
      - task: wire
      - go generate ./...

  package:windows:
    desc: Package Windows executable with Fyne
    deps: [build:windows]
    dir: cmd/godo
    cmds:
      - fyne package -os windows
      - cmd: cmd /c move /Y Godo.exe "..\..\bin\Godo.exe"
        platforms: [windows]
      - cmd: mv Godo.exe ../../bin/
        platforms: [linux, darwin]
