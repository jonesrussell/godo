# Configuration Management

This project uses simplified, centralized configuration management with proper validation.

## Configuration Structure

### Main Configuration
- Centralized in [internal/config/config.go](mdc:internal/config/config.go)
- Use Viper for configuration loading
- Support environment variables and config files
- Validate configuration early
- No circular dependencies or shared anti-patterns

### Provider Configuration
- Configure providers in [internal/application/container/wire.go](mdc:internal/application/container/wire.go)
- Use constants for default values
- Validate configuration in providers
- Provide sensible defaults

## Configuration Patterns

### Environment Variables
- Use `GODO_` prefix for all environment variables
- Support nested configuration via underscores
- Example: `GODO_DATABASE_PATH`, `GODO_LOGGER_LEVEL`

### Configuration Validation
- Validate all configuration values
- Check for required fields
- Validate ranges and formats
- Fail fast on invalid configuration

### Default Values
- Provide sensible defaults for all settings
- Document default values
- Allow override via environment or config files
- Use constants for maintainability

## Configuration Usage
- Inject configuration into components
- Don't access configuration globally
- Use dependency injection for configuration
- Validate configuration in provider functions
- Avoid circular dependencies between config and other packages

## Simplified Structure
- Single config package: `internal/config/`
- No shared directories or anti-patterns
- Clear separation of concerns
- Platform-specific logic only where necessary
description:
globs:
alwaysApply: false
---
