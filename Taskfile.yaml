version: '3'

vars:
  BINARY_NAME: godo
  BUILD_DIR: dist
  COVERAGE_DIR: coverage
  GO_VERSION: 1.23
  GOOS:
    sh: go env GOOS
  VERSION:
    sh: git describe --tags --always 2>/dev/null || echo dev
  COMMIT:
    sh: git rev-parse --short HEAD 2>/dev/null || echo unknown
  BUILD_TIME:
    sh: powershell -Command "(Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')"

tasks:
  default:
    cmds:
    - task --list-all
    silent: true

  install-tools:
    desc: Install development tools
    cmds:
    - go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
    - go install golang.org/x/tools/cmd/goimports@latest
    - go install github.com/google/wire/cmd/wire@latest

  setup:linux:
    desc: Install Linux dependencies
    cmds:
    - sudo apt-get update
    - sudo apt-get install -y xvfb libx11-dev

  deps:
    desc: Download and tidy dependencies
    cmds:
    - go mod download
    - go mod tidy

  fmt:
    desc: Format code
    cmds:
    - gofmt -s -w .
    - goimports -w .

  lint:
    desc: Run all linters
    cmds:
    - golangci-lint run
    - go run ./cmd/godo-linter ./...

  lint:golangci:
    desc: Run golangci-lint
    cmds:
    - golangci-lint run

  lint:custom:
    desc: Run custom linter
    cmds:
    - go run ./cmd/godo-linter ./...

  test:
    desc: Run basic tests
    deps: [ wire:windows ]
    cmds:
    - go test ./... -tags=wireinject,windows

  test:race:
    desc: Run tests with race detection
    deps: [ wire ]
    cmds:
    - go test -race ./...

  test:cover:
    desc: Run tests with coverage
    deps: [ wire ]
    platforms: [ windows ]
    cmds:
    - powershell New-Item -ItemType Directory -Force -Path {{.COVERAGE_DIR}}
    - go test -coverprofile={{.COVERAGE_DIR}}/coverage.out -covermode=atomic ./...
    - go tool cover -html={{.COVERAGE_DIR}}/coverage.out -o {{.COVERAGE_DIR}}/coverage.html

  test:linux:
    desc: Run tests on Linux with virtual display
    deps: [ wire ]
    platforms: [ linux ]
    cmds:
    - mkdir -p {{.COVERAGE_DIR}}
    # Start Xvfb
    - Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
    # Wait for Xvfb to start
    - sleep 1
    # Run tests with virtual display and coverage
    - DISPLAY=:99.0 FYNE_RENDERER=software go test -race -coverprofile={{.COVERAGE_DIR}}/coverage.out -covermode=atomic ./...
    - go tool cover -html={{.COVERAGE_DIR}}/coverage.out -o {{.COVERAGE_DIR}}/coverage.html
    # Cleanup Xvfb
    - pkill Xvfb || true

  clean:
    desc: Clean up generated files
    cmds:
    - rm -rf {{.BUILD_DIR}}
    - rm -rf {{.COVERAGE_DIR}}
    - rm -rf internal/container/*_wire_gen.go

  wire:windows:
    desc: Generate wire code for Windows
    platforms: [ windows ]
    cmds:
    - cd internal/container; wire gen -tags windows

  wire:linux:
    desc: Generate wire code for Linux
    platforms: [ linux ]
    cmds:
    - cd internal/container; wire gen -tags linux

  wire:
    desc: Generate wire code for current platform
    cmds:
    - task: wire:{{OS}}

  # Docker-based builds with improved caching and parallel builds
  docker:build-image:
    desc: Build the Docker builder image
    cmds:
    - docker build --build-arg VERSION={{.VERSION}} --build-arg COMMIT={{.COMMIT}} --build-arg BUILD_TIME={{.BUILD_TIME}} -t godo-builder -f build/docker/Dockerfile .

  docker:build-all:
    desc: Build both Windows and Linux binaries using Docker
    cmds:
    - powershell -ExecutionPolicy Bypass -File ./build/build.ps1

  docker:build-linux:
    desc: Build Linux binary using Docker
    deps: [ wire ]
    cmds:
    - mkdir -p {{.BUILD_DIR}}
    - docker build --target linux-runtime --build-arg VERSION={{.VERSION}} --build-arg COMMIT={{.COMMIT}} --build-arg BUILD_TIME={{.BUILD_TIME}} -t godo-linux -f build/docker/Dockerfile .
    - docker create --name godo-linux-temp godo-linux
    - docker cp godo-linux-temp:/app/godo {{.BUILD_DIR}}/godo
    - docker rm godo-linux-temp

  docker:build-windows:
    desc: Build Windows binary using Docker
    deps: [ wire ]
    cmds:
    - mkdir -p {{.BUILD_DIR}}
    - docker build --target windows-runtime --build-arg VERSION={{.VERSION}} --build-arg COMMIT={{.COMMIT}} --build-arg BUILD_TIME={{.BUILD_TIME}} -t godo-windows -f build/docker/Dockerfile .
    - docker create --name godo-windows-temp godo-windows
    - docker cp godo-windows-temp:/godo.exe {{.BUILD_DIR}}/godo.exe
    - docker rm godo-windows-temp

  # Native builds (for development)
  build:windows:
    desc: Build for Windows (native)
    deps: [ wire:windows ]
    platforms: [ windows ]
    env:
      CGO_ENABLED: 1
      GOOS: windows
      GOARCH: amd64
    cmds:
    - go build -ldflags "-X main.version={{.VERSION}} -X main.commit={{.COMMIT}} -X main.buildTime={{.BUILD_TIME}} -s -w" -tags windows -o {{.BUILD_DIR}}/{{.BINARY_NAME}}.exe cmd/godo/main.go

  build:linux:
    desc: Build for Linux (native)
    deps: [ wire:linux ]
    platforms: [ linux ]
    env:
      CGO_ENABLED: 1
      GOOS: linux
      GOARCH: amd64
    cmds:
    - mkdir -p {{.BUILD_DIR}}
    - go build -ldflags "-X main.version={{.VERSION}} -X main.commit={{.COMMIT}} -X main.buildTime={{.BUILD_TIME}} -s -w" -tags linux -o {{.BUILD_DIR}}/{{.BINARY_NAME}} cmd/godo/main.go

  build:
    desc: Build for current platform (native)
    cmds:
    - task: build:{{OS}}

  run:
    desc: Run the application
    deps: [ wire ]
    env:
      CGO_ENABLED: 1
    cmds:
    - go run -ldflags "-X main.version={{.VERSION}} -X main.commit={{.COMMIT}} -X main.buildTime={{.BUILD_TIME}}" cmd/godo/main.go

  run-debug:
    desc: Run the application with debug output
    deps: [ wire ]
    env:
      CGO_ENABLED: 1
      LOG_LEVEL: debug
    cmds:
    - go run -ldflags "-X main.version={{.VERSION}} -X main.commit={{.COMMIT}} -X main.buildTime={{.BUILD_TIME}}" cmd/godo/main.go

  watch:
    desc: Watch for changes and rebuild
    cmds:
    - watchexec -r -e go "task build && {{if eq OS "windows"}}{{.BUILD_DIR}}/{{.BINARY_NAME}}.exe{{else}}{{.BUILD_DIR}}/{{.BINARY_NAME}}{{end}}"

  # CI/CD tasks
  ci:
    desc: Run CI checks
    cmds:
    - task: fmt
    - task: lint
    - task: test
    - task: docker:build-all

  # New tasks for release management
  release:prepare:
    desc: Prepare a new release
    cmds:
    - task: clean
    - task: fmt
    - task: lint
    - task: test
    - task: docker:build-all

  release:tag:
    desc: Create and push a new release tag
    vars:
      TAG: '{{.CLI_ARGS}}'
    cmds:
    - git tag -a {{.TAG}} -m "Release {{.TAG}}"
    - git push origin {{.TAG}}

  release:docker:
    desc: Build and push Docker images
    vars:
      TAG: '{{.CLI_ARGS}}'
    cmds:
    - docker build --target linux-runtime -t jonesrussell/godo:{{.TAG}} -f build/docker/Dockerfile .
    - docker push jonesrussell/godo:{{.TAG}}
    - docker tag jonesrussell/godo:{{.TAG}} jonesrussell/godo:latest
    - docker push jonesrussell/godo:latest

  all:
    desc: Run all main tasks
    cmds:
    - task: deps
    - task: fmt
    - task: wire
    - task: lint
    - task: test
    - task: docker:build-all
