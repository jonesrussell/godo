# Godo Project Overview

This is a Go-based task management application using clean architecture and dependency injection.

## Project Structure

### Entry Point
- Main application: [cmd/godo/main.go](mdc:cmd/godo/main.go)
- Application logic: [internal/application/app/app.go](mdc:internal/application/app/app.go)
- DI container: [internal/application/container/wire.go](mdc:internal/application/container/wire.go)

### Architecture Layers
- **Domain**: Business logic and models - [internal/domain/](mdc:internal/domain/)
- **Application**: Use cases and orchestration - [internal/application/](mdc:internal/application/)
- **Infrastructure**: External concerns (storage, GUI, API) - [internal/infrastructure/](mdc:internal/infrastructure/)

### Key Components
- **Task Management**: [internal/domain/service/task_service.go](mdc:internal/domain/service/task_service.go)
- **Storage**: [internal/infrastructure/storage/](mdc:internal/infrastructure/storage/)
- **GUI**: [internal/infrastructure/gui/](mdc:internal/infrastructure/gui/)
- **API**: [internal/infrastructure/api/](mdc:internal/infrastructure/api/)
- **Configuration**: [internal/config/config.go](mdc:internal/config/config.go)
- **Hotkey Management**: [internal/application/app/hotkey/](mdc:internal/application/app/hotkey/)

## Technology Stack
- **DI Framework**: Google Wire
- **GUI Framework**: Fyne
- **Database**: SQLite
- **Logging**: Zap
- **Configuration**: Viper
- **Testing**: Mockgen for mocks
- **Hotkey Library**: github.com/csturiale/hotkey (actively maintained fork)

## Development Tools
- **Build System**: Taskfile - [Taskfile.yml](mdc:Taskfile.yml)
- **Linting**: golangci-lint - [.golangci.yml](mdc:.golangci.yml)
- **Code Generation**: Wire, Mockgen
- **Platform Support**: Linux, Windows

## Key Principles
- Clean Architecture with clear layer separation
- Dependency Injection using Wire framework
- Interface-based design for testability
- Comprehensive error handling
- Platform-agnostic core with platform-specific implementations
- Simplified configuration management (no shared directories)
- Unified hotkey management across platforms

## Recent Improvements
- Migrated from over-engineered shared/config to simplified internal/config
- Removed circular dependencies and unnecessary abstractions
- Updated to actively maintained hotkey library fork
- Consolidated platform-specific hotkey managers into unified implementation
- Eliminated shared/common and shared/config anti-patterns
description:
globs:
alwaysApply: false
---
