// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/interfaces.go
//
// Generated by this command:
//
//	mockgen -source=internal/app/interfaces.go -destination=internal/app/mocks.go -package=app
//

// Package app is a generated GoMock package.
package app

import (
	reflect "reflect"

	v2 "fyne.io/fyne/v2"
	gomock "go.uber.org/mock/gomock"
)

// MockUI is a mock of UI interface.
type MockUI struct {
	ctrl     *gomock.Controller
	recorder *MockUIMockRecorder
	isgomock struct{}
}

// MockUIMockRecorder is the mock recorder for MockUI.
type MockUIMockRecorder struct {
	mock *MockUI
}

// NewMockUI creates a new mock instance.
func NewMockUI(ctrl *gomock.Controller) *MockUI {
	mock := &MockUI{ctrl: ctrl}
	mock.recorder = &MockUIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUI) EXPECT() *MockUIMockRecorder {
	return m.recorder
}

// CenterOnScreen mocks base method.
func (m *MockUI) CenterOnScreen() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CenterOnScreen")
}

// CenterOnScreen indicates an expected call of CenterOnScreen.
func (mr *MockUIMockRecorder) CenterOnScreen() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CenterOnScreen", reflect.TypeOf((*MockUI)(nil).CenterOnScreen))
}

// Hide mocks base method.
func (m *MockUI) Hide() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Hide")
}

// Hide indicates an expected call of Hide.
func (mr *MockUIMockRecorder) Hide() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hide", reflect.TypeOf((*MockUI)(nil).Hide))
}

// Resize mocks base method.
func (m *MockUI) Resize(size v2.Size) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Resize", size)
}

// Resize indicates an expected call of Resize.
func (mr *MockUIMockRecorder) Resize(size any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resize", reflect.TypeOf((*MockUI)(nil).Resize), size)
}

// SetContent mocks base method.
func (m *MockUI) SetContent(content v2.CanvasObject) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetContent", content)
}

// SetContent indicates an expected call of SetContent.
func (mr *MockUIMockRecorder) SetContent(content any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetContent", reflect.TypeOf((*MockUI)(nil).SetContent), content)
}

// Show mocks base method.
func (m *MockUI) Show() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Show")
}

// Show indicates an expected call of Show.
func (mr *MockUIMockRecorder) Show() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Show", reflect.TypeOf((*MockUI)(nil).Show))
}

// MockApplication is a mock of Application interface.
type MockApplication struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationMockRecorder
	isgomock struct{}
}

// MockApplicationMockRecorder is the mock recorder for MockApplication.
type MockApplicationMockRecorder struct {
	mock *MockApplication
}

// NewMockApplication creates a new mock instance.
func NewMockApplication(ctrl *gomock.Controller) *MockApplication {
	mock := &MockApplication{ctrl: ctrl}
	mock.recorder = &MockApplicationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplication) EXPECT() *MockApplicationMockRecorder {
	return m.recorder
}

// Cleanup mocks base method.
func (m *MockApplication) Cleanup() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Cleanup")
}

// Cleanup indicates an expected call of Cleanup.
func (mr *MockApplicationMockRecorder) Cleanup() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cleanup", reflect.TypeOf((*MockApplication)(nil).Cleanup))
}

// Run mocks base method.
func (m *MockApplication) Run() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Run")
}

// Run indicates an expected call of Run.
func (mr *MockApplicationMockRecorder) Run() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockApplication)(nil).Run))
}

// SetupUI mocks base method.
func (m *MockApplication) SetupUI() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetupUI")
	ret0, _ := ret[0].(error)
	return ret0
}

// SetupUI indicates an expected call of SetupUI.
func (mr *MockApplicationMockRecorder) SetupUI() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetupUI", reflect.TypeOf((*MockApplication)(nil).SetupUI))
}
