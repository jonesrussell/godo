version: '3'

vars:
  VERSION:
    sh: git describe --tags --always --dirty
  GO_VERSION: 1.23

tasks:
  default:
    cmds:
      - task: run

  wire:
    desc: Generate wire code for current platform only
    cmds:
      - |
        cd internal/container && \
        wire gen

  wire:all:
    desc: Generate wire code for all platforms
    cmds:
      - task: wire:linux
      - task: wire:windows
      - task: wire:darwin
      - |
        cd internal/container && \
        {{if eq OS "windows"}}
          cmd /c "copy linux_wire_gen.go wire_gen.go >nul && \
          echo // +build !windows,!darwin > temp && \
          type wire_gen.go >> temp && \
          copy temp wire_gen.go >nul && \
          del temp"
        {{else}}
          mv wire_gen_linux.go wire_gen.go && \
          echo "// +build !windows,!darwin" > temp && \
          cat wire_gen.go >> temp && \
          mv temp wire_gen.go
        {{end}}

  wire:windows:
    desc: Generate wire code for Windows
    env:
      GOOS: windows
    cmds:
      - |
        cd internal/container && \
        wire gen --output_file_prefix windows_

  wire:darwin:
    desc: Generate wire code for macOS
    env:
      GOOS: darwin
    cmds:
      - |
        cd internal/container && \
        wire gen --output_file_prefix darwin_

  wire:linux:
    desc: Generate wire code for Linux
    env:
      GOOS: linux
    cmds:
      - |
        cd internal/container && \
        wire gen --output_file_prefix linux_

  run:
    deps: [wire:all]
    cmds:
      - go run cmd/godo/main.go

  debug:
    deps: [wire:all]
    env:
      DEBUG: "1"
    cmds:
      - go run cmd/godo/main.go

  test:
    desc: Run tests
    deps: [wire:all]
    env:
      CGO_ENABLED: 1
      GORACE: "halt_on_error=1"
    cmds:
      - go test -race -timeout 5m -v ./...

  lint:
    desc: Run linters for current platform only
    cmds:
      - |
        CURRENT_GOOS=$(go env GOOS)
        echo "Running linter for current platform ($CURRENT_GOOS)"
        golangci-lint run

  lint-all:
    desc: Run linters for all platforms
    cmds:
      - task: lint
      - |
        echo "Running cross-platform build checks..."
        GOOS=windows go build ./...
        GOOS=darwin go build ./...
        GOOS=linux go build ./...

  fmt:
    desc: Format all Go code
    cmds:
      - goimports -w .
      - gofmt -s -w .
      - go mod tidy

  fmt-check:
    desc: Check if files need formatting
    cmds:
      - goimports -l .
      - test -z "$(gofmt -l .)"

  clean:
    desc: Clean build artifacts and generated files
    cmds:
      - cmd: rd /s /q bin 2>nul || exit 0
        platforms: [windows]
      - cmd: rm -rf bin/
        platforms: [linux, darwin]
      - cmd: del /f /q internal\container\wire_gen*.go 2>nul || exit 0
        platforms: [windows]
      - cmd: rm -f internal/container/wire_gen*.go
        platforms: [linux, darwin]

  dev:
    desc: Run development tasks (fmt, lint, test, build)
    cmds:
      - task: fmt
      - task: wire
      - task: lint
      - task: test
      - task: build

  install:
    desc: Install project dependencies
    cmds:
      - go install github.com/google/wire/cmd/wire@latest
      - go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
      - go mod tidy
      - go mod download

  logs:
    desc: Watch application logs
    platforms: [windows]
    cmds:
      - cmd /C "type logs\godo.log"

  test:coverage:
    desc: Run tests with coverage report
    deps: [wire:all]
    cmds:
      - 'go test -race -coverprofile="coverage.out" -coverpkg="./..." "./..."'
      - 'go tool cover -html="coverage.out" -o coverage.html'
      - 'go tool cover -func="coverage.out"'

  test:coverage:threshold:
    desc: Run tests and check coverage threshold
    deps: [wire:all]
    cmds:
      - cmd: bash scripts/test-coverage.sh
        platforms: [windows]
      - cmd: ./scripts/test-coverage.sh
        platforms: [linux, darwin]

  build:
    desc: Build for current platform
    deps: [wire]
    vars:
      LDFLAGS: >-
        -X main.Version={{.VERSION}}
        -X main.BuildTime={{now | date "2006-01-02T15:04:05Z07:00"}}
        -w -s
    cmds:
      - go build -ldflags="{{.LDFLAGS}}" -o bin/godo cmd/godo/main.go

  build:all:
    desc: Build for all platforms
    deps: [wire:all]
    cmds:
      - task: build:windows
      - task: build:darwin
      - task: build:linux

  build:windows:
    desc: Build for Windows
    deps: [wire:windows]
    env:
      GOOS: windows
      GOARCH: amd64
    dir: cmd/godo
    cmds:
      - go build -o ../../bin/godo.exe

  build:darwin:
    desc: Build for macOS
    deps: [wire:darwin]
    env:
      GOOS: darwin
      GOARCH: amd64
    cmds:
      - go build -o bin/godo-darwin cmd/godo/main.go

  build:linux:
    desc: Build for Linux
    deps: [wire:linux]
    env:
      GOOS: linux
      GOARCH: amd64
    cmds:
      - go build -o bin/godo-linux cmd/godo/main.go

  watch:
    desc: Watch for file changes and rebuild
    cmds:
      - task: build
      - watchexec -e go "task build"

  docker:
    desc: Build Docker image
    cmds:
      - docker build -t godo:latest .

  generate:
    desc: Run all code generation
    cmds:
      - task: wire
      - go generate ./...

  package:windows:
    desc: Package Windows executable with Fyne
    deps: [build:windows]
    dir: cmd/godo
    cmds:
      - fyne package -os windows
      - cmd: cmd /c move /Y Godo.exe "..\..\bin\Godo.exe"
        platforms: [windows]
      - cmd: mv Godo.exe ../../bin/
        platforms: [linux, darwin]

  act:
    desc: Run GitHub Actions locally using act
    cmds:
      - act -v -j build --container-architecture linux/amd64 -P ubuntu-latest=catthehacker/ubuntu:act-medium

  check:all:
    desc: Run all checks (fmt, lint, test)
    cmds:
      - task: fmt-check
      - task: lint-all
      - task: test:coverage:threshold

  mod:verify:
    desc: Verify dependencies
    cmds:
      - go mod verify
      - go mod tidy -check

  security:scan:
    desc: Run security scanners
    cmds:
      - govulncheck ./...
      - gosec ./...

  clean:cache:
    desc: Clean Go build cache
    cmds:
      - go clean -cache -modcache -testcache

  verify:env:
    desc: Verify development environment
    cmds:
      - |
        {{if eq OS "windows"}}
          powershell -Command "if ((go version) -notmatch 'go1\.23|go1\.2[4-9]|go1\.[3-9]|go[2-9]') { Write-Error 'Go version must be 1.23 or higher'; exit 1 }"
        {{else}}
          go version | awk -F'go| ' '{split($3,v,"."); if (v[1] < 1 || (v[1] == 1 && v[2] < 23)) {print "Go version must be 1.23 or higher"; exit 1}}'
        {{end}}
